<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
    <!-- Here is an example route which builds a request to the GetList method 
		of the FlightCustomer BAPI to retrieve the list of Flight Customers within 
		an SAP System. The request is sent to SAP via a synchronous RFC endpoint 
		to the BAPI method which also receives back a response containing the list 
		of Flight Customers. -->
    <camelContext id="camelContext-74e5c447-c0c4-4785-b527-548455d9d938" xmlns="http://camel.apache.org/schema/spring">
        <!-- RMG: DataFormats to convert POJO - XML -->
        <dataFormats>
            <xmljson id="xml2json"/>
        </dataFormats>
        <!-- RMG - REST Configuration -->
        <restConfiguration apiContextPath="/api-doc" bindingMode="auto"
            component="servlet" contextPath="/sap-fuse-workshop" enableCORS="true">
            <!--            <apiProperty key="cors" value="true"/>-->
            <apiProperty key="api.title" value="SAP - FUSE - Workshop - REST Camel API"/>
            <apiProperty key="api.version" value="1.0.0"/>
            <apiProperty key="host" value="{{swagger.host}}"/>
        </restConfiguration>
        <!-- RMG - API REST Definition -->
        <rest enableCORS="true" id="api-rest-definition" path="/api">
            <!-- e.g. http://localhost:8080/sap-fuse-workshop/api/carriers -->
            <get id="api-get-sap-data" produces="application/json" uri="/customers?name={customerName}">
                <description>Searches for a customer from SAP Flights</description>
                <param dataType="string"
                    description="Customer name to search for. Use asterisk to perform a wildcard search."
                    name="name" type="query"/>
                <to uri="direct:api-route-get-sap-data"/>
            </get>
            <!-- TJ - REST call for OData (camel-olingo2) GET -->
            <get id="api-get-sap-carriers-odata-olingo2"
                produces="application/json" uri="/olingo2/carriers?id={id}">
                <description>Searches for Carriers from SAP via OData Olingo2</description>
                <param dataType="string"
                    description="Carrier ID to search for. Use % to perform a wildcard search."
                    name="id" type="query"/>
                <to uri="direct:api-route-get-sap-carriers-odata-olingo2"/>
            </get>
            <get id="api-get-sap-flights-odata-olingo2"
               produces="application/json" uri="/olingo2/{id}/flights">
               <description>Get all Flights for Carriers from SAP via OData Olingo2</description>
               <to uri="direct:api-route-get-sap-flights-odata-olingo2"/>
            </get>
            <post consumes="application/json" enableCORS="true"
                id="api-put-sap-data"
                type="org.jboss.quickstarts.fuse.types.FlightCustomer" uri="/customers">
                <description>Adds a customer to SAP Flights</description>
                <to uri="direct:api-route-put-sap-data"/>
            </post>
            <!-- Methods to use OData (camel-netweaver) -->
            <get id="api-get-sap-carriers-odata-netweaver" produces="application/json" uri="/netweaver/Carriers">
                <description>Gets all carriers using OData with Camel Netweaver component</description>
                <to uri="direct:api-route-get-sap-carriers-odata-netweaver"/>
            </get>
	    <get id="api-get-sap-flights-odata-netweaver" produces="application/json" uri="/netweaver/Flights">
                <description>Gets all flights for carrier 'AA' using OData with Camel Netweaver component</description>
                <to uri="direct:api-route-get-sap-flights-odata-netweaver"/>
            </get>
        </rest>
        <!-- RMG - API REST Routes -->
        <route id="api-route-get-sap-data">
            <from id="direct-api-route-get-sap-data" uri="direct:api-route-get-sap-data"/>
            <log id="_log1get" message="[REST] >>> Get Data from SAP"/>
            <to id="_to1get" uri="bean:requestGet"/>
            <!-- Get data from SAP using the component sap-srfc-destination -->
            <to id="_to2get" uri="sap-srfc-destination:quickstartDest:BAPI_FLCUST_GETLIST"/>
            <!-- Log the Exchange body with the result from the SAP component -->
            <log id="_log2get" message="[REST] >>> BAPI Data from SAP (XML) ${body}"/>
            <!-- MAK - Adding marshal back for XML to JSON parsing-->
            <!--<marshal ref="xml2json"/>-->
            <!-- MAK - Adding marshal back for XML to JSON parsing-->
            <to id="_to1" uri="log:mylogger?showAll=true"/>
        </route>
        <route id="api-route-put-sap-data">
            <from id="direct-api-route-put-sap-data" uri="direct:api-route-put-sap-data"/>
            <log id="_log1put" message="[REST] >>> Put Data into SAP"/>
            <to id="_to1put" uri="bean:requestPut"/>
            <!-- Put data from SAP using the component sap-srfc-destination -->
            <log id="_log2put" loggingLevel="INFO" message="${body}"/>
            <to id="_to2put" uri="sap-trfc-destination:quickstartDest:BAPI_FLCUST_CREATEFROMDATA"/>
        </route>
        <!-- RGC Routes for OData (camel-netweaver) access -->
        <route id="api-route-get-sap-carriers-odata-netweaver">
            <from id="direct-api-route-get-sap-carriers-odata-netweaver" uri="direct:api-route-get-sap-carriers-odata-netweaver"/>
            <log id="_log3get" message="[REST] >>> Get Data from SAP"/>
            <to id="_to3get" uri="bean:requestGet"/>
            <log id="_log4get" message="[REST] >>> OData Camel Netweaver Carriers ${body}"/>
            <setHeader headerName="CamelNetWeaverCommand">
                <constant>CarrierSet</constant>
            </setHeader>
            <toD id="_to4get" uri="sap-netweaver:http://{{s4hana.host}}:{{s4hana.port}}/sap/opu/odata/sap/ZFLIGHT_PROJECT_SRV/?username={{s4hana.user}}&amp;password={{s4hana.password}}"/>
            <to id="_to2" uri="log:mylogger?showAll=true"/>
        </route>
        <route id="api-route-get-sap-flights-odata-netweaver">
            <from id="direct-api-route-get-sap-flights-odata-netweaver" uri="direct:api-route-get-sap-flights-odata-netweaver"/>
            <log id="_log5get" message="[REST] >>> Get Data from SAP"/>
            <to id="_to5get" uri="bean:requestGet"/>
            <log id="_log6get" message="[REST] >>> OData Camel Netweaver Flights ${body}"/>
            <setHeader headerName="CamelNetWeaverCommand">
		    <constant>CarrierSet('AA')/Flights</constant>
            </setHeader>
            <toD id="_to6get" uri="sap-netweaver:http://{{s4hana.host}}:{{s4hana.port}}/sap/opu/odata/sap/ZFLIGHT_PROJECT_SRV/?username={{s4hana.user}}&amp;password={{s4hana.password}}"/>
	    <to id="_to3" uri="log:mylogger?showAll=true"/>
        </route>
        <!-- TJ - Route for OData (camel-olingo2) Carriers access -->
        <route id="api-route-get-sap-carriers-odata-olingo2">
            <from id="direct-api-route-get-sap-carriers-odata-olingo2" uri="direct:api-route-get-sap-carriers-odata-olingo2"/>
            <log id="_log1getodataCarriersolingo2" message="[REST] >>> Get Data from SAP Carriers via OData Olingo2"/>
            <toD id="_to2getodataCarriersolingo2" uri="olingo2://read/CarrierSet(&#39;${header.id}&#39;)"/>
            <!-- Log the Exchange body with the result from the SAP component -->
            <log id="_log2getodataCarriersolingo2" message="[REST] >>> OData response from SAP using camel-olingo2 ${body}"/>
        </route>
        <!-- TJ - Route for OData (camel-olingo2) Carriers access -->
        <!-- TODO Parameterize -->
        <route id="api-route-get-sap-flights-odata-olingo2">
            <from id="api-route-get-sap-flights-odata-olingo2" uri="direct:api-route-get-sap-flights-odata-olingo2"/>
            <log id="_log1getodataFlightsolingo2" message="[REST] >>> Get Data from SAP Flights via OData Olingo2"/>
            <toD id="_to2getodataFlightsolingo2" uri="olingo2://read/CarrierSet(&#39;${header.id}&#39;)/Flights"/>
            <!-- Log the Exchange body with the result from the SAP component -->
            <log id="_log2getodataFlightsolingo2" message="[REST] >>> OData response from SAP using camel-olingo2 ${body}"/>
        </route>
    </camelContext>
    <!-- TJ - Added Configuration for camel-olingo2 component -->
    <bean id="olingo2Configuration" class="org.apache.camel.component.olingo2.Olingo2Configuration">
        <property name="httpHeaders">
            <map>
                <entry key="Authorization" value="Basic ZGV2ZWxvcGVyOlJlZGhhdDEyMyE="/>
            </map>
        </property>
	<property name="serviceUri" value="http://${S4HANA_HOST}:${S4HANA_PORT}/sap/opu/odata/sap/ZFLIGHT_PROJECT_SRV/"/>    
        <property name="contentType" value="application/json;charset=utf-8"/>
    </bean>

    <bean id="olingo2" class="org.apache.camel.component.olingo2.Olingo2Component">     
        <property name="configuration" ref="olingo2Configuration" />
    </bean>
    
    <!-- Create interceptor to support tRFC processing -->
    <bean
        class="org.fusesource.camel.component.sap.CurrentProcessorDefinitionInterceptStrategy"
        id="currentProcessorDefinitionInterceptor" scope="singleton"/>
    <!-- Instantiates a processor bean which builds a request to the GetList 
		method of the FlightCustomer BAPI and sets that request in the body of the 
		exchange's message. -->
    <bean
        class="org.jboss.quickstarts.fuse.sap_srfc_destination_spring_boot.CreateRequest"
        id="requestGet" scope="singleton"/>
    <bean
        class="org.jboss.quickstarts.fuse.sap_trfc_destination_spring_boot.CreateRequest"
        id="requestPut" scope="singleton"/>
</beans>
